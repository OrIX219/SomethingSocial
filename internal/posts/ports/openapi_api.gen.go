// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package ports

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /posts)
	GetPosts(w http.ResponseWriter, r *http.Request, params GetPostsParams)

	// (POST /posts)
	CreatePost(w http.ResponseWriter, r *http.Request)

	// (GET /posts/feed)
	GetFeed(w http.ResponseWriter, r *http.Request)

	// (DELETE /posts/{postId})
	DeletePost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID)

	// (GET /posts/{postId})
	GetPost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID)

	// (PUT /posts/{postId})
	UpdatePost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID)

	// (DELETE /posts/{postId}/downvote)
	RemoveDownvote(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID)

	// (POST /posts/{postId}/downvote)
	DownvotePost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID)

	// (DELETE /posts/{postId}/upvote)
	RemoveUpvote(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID)

	// (POST /posts/{postId}/upvote)
	UpvotePost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /posts)
func (_ Unimplemented) GetPosts(w http.ResponseWriter, r *http.Request, params GetPostsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /posts)
func (_ Unimplemented) CreatePost(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /posts/feed)
func (_ Unimplemented) GetFeed(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /posts/{postId})
func (_ Unimplemented) DeletePost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /posts/{postId})
func (_ Unimplemented) GetPost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /posts/{postId})
func (_ Unimplemented) UpdatePost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /posts/{postId}/downvote)
func (_ Unimplemented) RemoveDownvote(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /posts/{postId}/downvote)
func (_ Unimplemented) DownvotePost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /posts/{postId}/upvote)
func (_ Unimplemented) RemoveUpvote(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /posts/{postId}/upvote)
func (_ Unimplemented) UpvotePost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", r.URL.Query(), &params.Author)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "author", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "dateFrom" -------------

	err = runtime.BindQueryParameter("form", true, false, "dateFrom", r.URL.Query(), &params.DateFrom)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dateFrom", Err: err})
		return
	}

	// ------------- Optional query parameter "dateTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "dateTo", r.URL.Query(), &params.DateTo)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dateTo", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "vote" -------------

	err = runtime.BindQueryParameter("form", true, false, "vote", r.URL.Query(), &params.Vote)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vote", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPosts(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePost operation middleware
func (siw *ServerInterfaceWrapper) CreatePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeed operation middleware
func (siw *ServerInterfaceWrapper) GetFeed(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeed(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeletePost operation middleware
func (siw *ServerInterfaceWrapper) DeletePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "postId", runtime.ParamLocationPath, chi.URLParam(r, "postId"), &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePost(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPost operation middleware
func (siw *ServerInterfaceWrapper) GetPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "postId", runtime.ParamLocationPath, chi.URLParam(r, "postId"), &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPost(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdatePost operation middleware
func (siw *ServerInterfaceWrapper) UpdatePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "postId", runtime.ParamLocationPath, chi.URLParam(r, "postId"), &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePost(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RemoveDownvote operation middleware
func (siw *ServerInterfaceWrapper) RemoveDownvote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "postId", runtime.ParamLocationPath, chi.URLParam(r, "postId"), &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveDownvote(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DownvotePost operation middleware
func (siw *ServerInterfaceWrapper) DownvotePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "postId", runtime.ParamLocationPath, chi.URLParam(r, "postId"), &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DownvotePost(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RemoveUpvote operation middleware
func (siw *ServerInterfaceWrapper) RemoveUpvote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "postId", runtime.ParamLocationPath, chi.URLParam(r, "postId"), &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveUpvote(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpvotePost operation middleware
func (siw *ServerInterfaceWrapper) UpvotePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "postId", runtime.ParamLocationPath, chi.URLParam(r, "postId"), &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpvotePost(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts", wrapper.GetPosts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/posts", wrapper.CreatePost)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts/feed", wrapper.GetFeed)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/posts/{postId}", wrapper.DeletePost)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts/{postId}", wrapper.GetPost)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/posts/{postId}", wrapper.UpdatePost)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/posts/{postId}/downvote", wrapper.RemoveDownvote)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/posts/{postId}/downvote", wrapper.DownvotePost)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/posts/{postId}/upvote", wrapper.RemoveUpvote)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/posts/{postId}/upvote", wrapper.UpvotePost)
	})

	return r
}
