openapi: 3.0.3
info:
  title: Test API
  description: TODO
  version: 0.1.1
servers:
  - url: https://{hostname}/api
    variables:
      hostname:
        default: localhost
security:
  - bearerAuth: []
tags:
  - name: User
paths:
  /user:
    get:
      operationId: getCurrentUser
      tags: [User]
      responses:
        '200':
          $ref: '#/components/responses/UserData'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /user/{userId}:
    get:
      operationId: getUser
      tags: [User]
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          $ref: '#/components/responses/UserData'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
          
  /user/{userId}/following:
    get:
      operationId: getUserFollows
      tags: [User]
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          $ref: '#/components/responses/UserFollows'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
          
  /user/{userId}/followers:
    get:
      operationId: getUserFollowers
      tags: [User]
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          $ref: '#/components/responses/UserFollowers'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
  
  /user/{userId}/follow:
    post:
      operationId: followUser
      tags: [User]
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          $ref: '#/components/responses/Status'
        default:
          $ref: '#/components/responses/UnexpectedError'
          
  /user/{userId}/unfollow:
    post:
      operationId: unfollowUser
      tags: [User]
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          $ref: '#/components/responses/Status'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /user/{userId}/promote:
    post:
      operationId: promoteUser
      tags: [User]
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          $ref: '#/components/responses/Status'
        default:
          $ref: '#/components/responses/UnexpectedError'
  
  /user/{userId}/demote:
    post:
      operationId: demoteUser
      tags: [User]
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          $ref: '#/components/responses/Status'
        default:
          $ref: '#/components/responses/UnexpectedError'
  
components:
  schemas:
    User:
      type: object
      required: [id, name, registrationDate, lastLogin, karma, postsCount, followers, following, role]
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        registrationDate:
          type: string
          format: date-time
        lastLogin:
          type: string
          format: date-time
        karma:
          type: integer
          format: int64
        postsCount:
          type: integer
          format: int64
        followers:
          type: integer
          format: int64
        following:
          type: integer
          format: int64
        role:
          type: string
          enum: [user, moderator, admin]
          
    UserArray:
      type: array
      items:
        $ref: '#/components/schemas/User'
    
    Status:
      type: object
      required: [status]
      properties:
        status:
          type: string
        
    Error:
      type: object
      required:
        - slug
        - message
      properties:
        slug:
          type: string
        message:
          type: string
          
  responses:
    UserData:
      description: Information about user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
            
    UserFollows:
      description: User's followed users
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserArray'
            
    UserFollowers:
      description: Users following user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserArray'
    
    Status:
      description: Status of action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Status'
            
    NotFound:
      description: Page not found
    
    UnexpectedError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT